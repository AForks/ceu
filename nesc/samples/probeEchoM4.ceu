@include(bitmap.c);
@include(radio.m4);
@include(DS.m4);

C do
	typedef nx_struct {
		nx_uint16_t ack;
		nx_uint8_t data;
	}	Payload;
end

@RADIO_retry(200ms, @RADIO_start);
_DBG("Radio started\n");

@define(N_NODES, 16);
input int Photo_readDone;
_Payload empty, final;
final.data = 0;
empty.data = 0;

u8[ eval(N_NODES/8) ] nodes;
_bm_clear(nodes, N_NODES);

await 1s;
par/or do
	@DS_neighbours(nodes, N_NODES, 100, 200ms);
with
	await 2s;
end

C do
    void aggr (Payload* p1, Payload *p2){
        p1->data = p1->data + p2->data;
    }
end

await 500ms;
@DS_probeEcho(_SERVER_ID, N_NODES, nodes, _Payload, &empty, &final, _aggr, `
do
	_Photo_read();
	int sensor_data = await Photo_readDone;
	final.data = final.data + sensor_data;
endÂ´, 500ms);

if _TOS_NODE_ID == _SERVER_ID then	
	_DBG("Final: %d\n", final.data);
	_DBG("Average value: %f\n", (final.data/<float>N_NODES));
end 

return 0;
