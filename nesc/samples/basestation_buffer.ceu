include(`leds.m4')
include(`radio.m4')
include(`serial.m4')

define(`SERIAL_LEN', `5')
message_t[SERIAL_LEN] serialBuf;
u8 serialIn  = 0;
u8 serialOut = 0;
u8 serialTot = 0;

define(`RADIO_LEN', `5')
message_t[RADIO_LEN] radioBuf;
u8 radioIn  = 0;
u8 radioOut = 0;
u8 radioTot = 0;

par/and do
    RADIO_START(1s);
with
    SERIAL_START(1s);
end;

par/or do
    loop do
        message_t* p = await Radio_receive;
        emit Leds_led1Toggle();
        if serialTot == SERIAL_LEN then
            emit Leds_led2Toggle();
        else
            serialBuf[serialIn] = *p;
            serialIn = (serialIn+1) % SERIAL_LEN;
            emit serialTot(serialTot + 1);
        end;
    end;
with
    loop do
        if serialTot == 0 then
            await serialTot;
        else
            SERIAL_SEND(1s, &serialBuf[serialOut],
                        _Radio_payloadLength(&serialBuf[serialOut]));
            serialOut = (serialOut+1) % SERIAL_LEN;
            serialTot = serialTot - 1;
        end;
    end;
with
    loop do
        await serial_err;
        emit Leds_led2Toggle();
    end;
with
    loop do
        message_t* p = await Serial_receive;
        emit Leds_led0Toggle();
        if radioTot == RADIO_LEN then
            emit Leds_led2Toggle();
        else
            radioBuf[radioIn] = *p;
            radioIn = (radioIn+1) % RADIO_LEN;
            emit radioTot(radioTot + 1);
        end;
    end;
with
    loop do
        if radioTot == 0 then
            await radioTot;
        else
            RADIO_SEND(1s, _AM_BROADCAST_ADDR, &radioBuf[radioOut],
                    _Serial_payloadLength(&radioBuf[radioOut]));
            radioOut = (radioOut+1) % RADIO_LEN;
            radioTot = radioTot - 1;
        end;
    end;
with
    loop do
        await radio_err;
        emit Leds_led2Toggle();
    end;
end;
