C do
    enum {
        UART_QUEUE_LEN = 12,
        RADIO_QUEUE_LEN = 12,
    };

    message_t  uartQueueBufs[UART_QUEUE_LEN];
    message_t  * ONE_NOK uartQueue[UART_QUEUE_LEN];
    uint8_t    uartIn, uartOut;
    bool       uartBusy, uartFull;

    message_t  radioQueueBufs[RADIO_QUEUE_LEN];
    message_t  * ONE_NOK radioQueue[RADIO_QUEUE_LEN];
    uint8_t    radioIn, radioOut;
    bool       radioBusy, radioFull;
end

par/and do
    _Radio_start();
    await Radio_startDone;
with
    _Serial_start();
    await Serial_startDone;
end

par do
    loop do
        message_t* p = await Radio_receive;
        _Leds_led1Toggle();
        if serialTot == 5 then
            _Leds_led2Toggle();
        else
            serialBuf[serialIn] = *p;
            serialIn = (serialIn+1) % 5;
            emit serialTot = serialTot + 1;
        end;
    end;
with
    loop do
        if serialTot == 0 then
            await serialTot;
        else
            int len = _Radio_payloadLength(&serialBuf[serialOut]);
            SERIAL_SEND(1s, &serialBuf[serialOut], len);
            serialOut = (serialOut+1) % 5;
            serialTot = serialTot - 1;
        end;
    end;
with
    loop do
        await serial_err;
        _Leds_led2Toggle();
    end;
with
    loop do
        message_t* p = await Serial_receive;
        _Leds_led0Toggle();
        if radioTot == 5 then
            _Leds_led2Toggle();
        else
            radioBuf[radioIn] = *p;
            radioIn = (radioIn+1) % 5;
            emit radioTot = radioTot + 1;
        end;
    end;
with
    loop do
        if radioTot == 0 then
            await radioTot;
        else
            int len = _Serial_payloadLength(&radioBuf[radioOut]);
            RADIO_SEND(1s, _AM_BROADCAST_ADDR, &radioBuf[radioOut], len);
            radioOut = (radioOut+1) % 5;
            radioTot = radioTot - 1;
        end;
    end;
with
    loop do
        await radio_err;
        _Leds_led2Toggle();
    end;
end;
