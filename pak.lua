local fout = assert(io.open('ceu','w'))
local fin  = assert(io.open'ceu.lua'):read'*a'

local function find_lua(version)
    version = version or "5.1"
    local maj, min = version:match("(%d+)%.(%d+)")
    local variants = { "lua-"..maj.."."..min, "lua"..maj.."."..min, "lua-"..maj..min, "lua"..maj..min, "lua" }
    if version == "5.1" then table.insert(variants, 1, "luajit") end
    local lua
    for _, l in ipairs(variants) do
        local ok = os.execute(l.." -v &> /dev/null")
        if ok == 0 or ok == true then
            lua = l
            break
        end
    end
    if not lua then
        return nil, "Lua not found"
    end
    local fd = assert(io.popen(lua..' -e "print(_VERSION)"'))
    local ver = fd:read("*a"):gsub("\n", "")
    fd:close()
    if ver ~= "Lua "..version then
        return nil, "Lua found as '"..lua.."', but it is "..ver..", expected Lua "..version
    end
    return lua
end

local lua, err = find_lua("5.1")
if not lua then
    io.stderr:write("Céu requires Lua 5.1.\n")
    os.exit(1)
end

local function subst (name)
    local s, e = string.find(fin, "dofile '"..name.."'")
    fin = string.sub(fin, 1, (s-1)) ..
            '\ndo\n' ..
                assert(io.open(name)):read'*a' ..
            '\nend\n' ..
          string.sub(fin, (e+1))
end

subst 'tp.lua'
subst 'lines.lua'
subst 'parser.lua'
subst 'ast.lua'
subst 'adj.lua'
subst 'sval.lua'
subst 'env.lua'
subst 'adt.lua'
subst 'ref.lua'
subst 'cval.lua'
subst 'isr.lua'
subst 'tight.lua'
subst 'fin.lua'
subst 'props.lua'
subst 'ana.lua'
subst 'acc.lua'
subst 'trails.lua'
subst 'labels.lua'
subst 'tmps.lua'
subst 'mem.lua'
subst 'val.lua'
subst 'code.lua'

fin = [[
FILES = {
    ceu_types_h =
        [====[]]..'\n'..assert(io.open'ceu_types.h'):read'*a'..[[]====],
    template_h =
        [====[]]..'\n'..assert(io.open'template.h'):read'*a'..[[]====],
    template_c =
        [====[]]..'\n'..assert(io.open'template.c'):read'*a'..[[]====],
    ceu_os_h =
        [====[]]..'\n'..assert(io.open'ceu_os.h'):read'*a'..[[]====],
    ceu_os_c =
        [====[]]..'\n'..assert(io.open'ceu_os.c'):read'*a'..[[]====],
    ceu_pool_h =
        [====[]]..'\n'..assert(io.open'ceu_pool.h'):read'*a'..[[]====],
    ceu_pool_c =
        [====[]]..'\n'..assert(io.open'ceu_pool.c'):read'*a'..[[]====],
    ceu_vector_h =
        [====[]]..'\n'..assert(io.open'ceu_vector.h'):read'*a'..[[]====],
    ceu_vector_c =
        [====[]]..'\n'..assert(io.open'ceu_vector.c'):read'*a'..[[]====],
    ceu_threads_h =
        [====[]]..'\n'..assert(io.open'ceu_threads.h'):read'*a'..[[]====],
}
]]..fin

fout:write([=[
#!/usr/bin/env ]=]..lua..[=[

--[[
-- This file is automatically generated.
-- Check the github repository for a readable version:
-- http://github.com/fsantanna/ceu
--
-- Céu is distributed under the MIT License:
--

Copyright (C) 2012 Francisco Sant'Anna

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

--
--]]

]=] .. fin)

fout:close()
os.execute('chmod +x ceu')
