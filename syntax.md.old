Syntax
======

<pre><code>
Stmt ::= &lt;empty-string&gt;
      |  <b>nothing</b>
      |  <b>escape</b> Exp
      |  <b>return</b> [Exp]
      |  <b>break</b>
      |  <b>continue</b>

  /* Declarations */

      /* variables, organisms, pools, and internal events */
      | <b>var</b> Type ID_var [`=´ &lt;Assignment&gt;] { `,´ ID_var [`=´ &lt;Assignment&gt;] }
      | <b>var</b> Type ID_var <b>with</b>
            Block
        <b>end</b>
      | <b>pool</b> Type ID_var [`=´ &lt;Assignment&gt;] { `,´ ID_var [`=´ &lt;Assignment&gt;] }
      | <b>event</b> (Type | `(´ TypeList `)´) ID_var { `,´ ID_var }

      /* internal functions */
      | <b>function</b> [<b>@rec</b>] `(´ParList`)´ `=>´ Type ID_var
            [ `do´ Block `end´ ]

      /* external functions */
      | <b>output</b> [<b>@rec</b>] `(´ParList`)´ `=>´ Type ID_var ID_ext { `,´ ID_ext }
      | <b>input</b>  [<b>@rec</b>] `(´ParList`)´ `=>´ Type ID_var ID_ext { `,´ ID_ext }
            [ `do´ Block `end´ ]

      /* interrupts */
      | <b>interrupt</b> `[´ NUM `]´ [<b>@rec</b>]
            [ `do´ Block `end´ ]

      /* external events */
      | <b>output</b> (Type | `(´ TypeList `)´) ID_ext { `,´ ID_ext }
      | <b>input</b>  (Type | `(´ TypeList `)´) ID_ext { `,´ ID_ext }

      /* external requests */
      | <b>output/input</b> `[´ [Exp] `]´ `(´ParList`)´ `=>´ Type ID_ext { `,´ ID_ext }
      | <b>input/output</b> `[´ [Exp] `]´ `(´ParList`)´ `=>´ Type ID_ext { `,´ ID_ext }
            [ `do´ Block `end´ ]

      /* classes & interfaces */
      | <b>class</b> ID_cls <b>with</b>
            Dcls
        <b>do</b>
            Block
        <b>end</b>
      | <b>interface</b> ID_cls <b>with</b>
            Dcls
        <b>end</b>
          <i>where</i>
              Dcls   ::= { (&lt;var&gt; | &lt;event-int&gt; | &lt;pool&gt; | &lt;function&gt; | DclImp) `;´ }
              DclImp ::= <b>interface</b> ID_cls { `,´ ID_cls }

      /* data types */
      | <b>data</b> ID_data <b>with</b>
            (Struct | Union)
        <b>end</b>
          <i>where</i>
              Struct ::= DclVar `;´ { DclVar `;´ }
              Union  ::= DclTag { <b>or</b> DclTag }
                  <i>where</i>
                      DclVar ::= <b>var</b> Type ID_var { `,´ ID_var }
                      DclTag ::= <b>tag</b> ID_tag <b>with</b>
                                     DclVar `;´ { DclVar `;´ }
                                 <b>end</b>

      /* C integration */
      | <b>native</b> [<b>@pure</b>|<b>@const</b>|<b>@nohold</b>|<b>@plain</b>] Nat_list
          <i>where</i>
              Nat_list  ::= (Nat_type|Nat_func|Nat_var) { `,` (Nat_type|Nat_func|Nat_var) }
              Nat_type  ::= ID_nat `=´ NUM
              Nat_func  ::= ID_nat `(´ `)´
              Nat_var   ::= ID_nat
      | (<b>native/pre</b> | <b>native</b>) <b>do</b>
            <i>&lt;C code definitions&gt;</i>
        <b>end</b>

      /* deterministic annotations */
      | <b>@safe</b> ID <b>with</b> ID { `,´ ID }

  /* Assignments */

      | (Exp | `(´VarList`)´) `=´
          /* <i>Assignment</i> */
          ( Exp
          | AssignableBlock
          | &lt;await&gt;
          | ( [ `(´ ] &lt;emit-ext&gt
                    | &lt;call-ext&gt;
                    | &lt;request-ext&gt;
              [ `)´ ] )
          | [ `new´ ] Data
          | &lt;traverse-loop&gt;
          | &lt;traverse-rec&gt;
          | Vector
          | &lt;lua&gt;
          | &lt;do-org&gt;
          | &lt;spawn&gt;
          | &lt;thread&gt;
          )
              <i>where</i>
                  Data ::= ID_data [`.´ ID_tag] `(´ List `)´
                  List ::= [ (Data|Exp) { `,´ (Data|Exp) } ]

                  Vector ::= Item { `..´ Item }
                  Item   ::= Exp | `[´ [ExpList] `]´

                  AssignableBlock ::= &lt;do-end&gt; | &lt;if-then-else&gt; | &lt;loop&gt; | &lt;every&gt; | &lt;par&gt;

  /* Function calls */

      /* internal calls */
      | [<b>call</b>|<b>call/rec</b>] Exp * `(´ [ExpList] `)´

      /* external calls */
      | (<b>call</b>+<b>call/rec</b>) ID_ext [ `=>´ (Exp | `(´ [ExpList] `)´)

  /* Event handling */

      /* internal/external await */
      | ( <b>await</b> ID_ext
        | <b>await</b> Exp
        | <b>await</b> (WCLOCKK|WCLOCKE)
        ) [ <b>until</b> Exp ]
      | <b>await</b> <b>FOREVER</b>

      /* internal/external emit */
      | <b>emit</b> Exp    [ `=>´ (Exp | `(´ [ExpList] `)´)
      | <b>emit</b> ID_ext [ `=>´ (Exp | `(´ [ExpList] `)´)
      | <b>emit</b> (WCLOCKK|WCLOCKE)

      /* external request */
      | <b>request</b> ID_ext [ `=>´ (Exp | `(´ [ExpList] `)´)

  /* Organism instantiation */

      /* do organism */
      | <b>do</b> ID_cls <b>with</b>
            Block
        <b>end</b>

      /* spawn */
      | <b>spawn</b> * ID_cls * [<b>in</b> Exp]
            [ <b>with</b> Block <b>end</b> ]

      /* kill */
      | <b>kill</b> * Exp * [ `=>´ Exp ]

  /* Flow control */

      /* explicit block */
      |  <b>do</b> Block <b>end</b>

      /* pre (top level) execution */
      | <b>pre do</b>
            Block
        <b>end</b>

      /* conditional */
      | <b>if</b> Exp <b>then</b>
            Block
        { <b>else/if</b> Exp <b>then</b>
            Block }
        [ <b>else</b>
            Block ]
        <b>end</b>

      /* loops */
      | <b>loop</b>[`/´ Exp] [ ID_var [<b>in</b> Exp] ] <b>do</b>
            Block
        <b>end</b>
      | <b>every</b> (Var | `(´VarList`)´) <b>in</b> (WCLOCKK|WCLOCKE|ID_ext|Exp) <b>do</b>
            Block
        <b>end</b>

      /* traverse */
      | <b>traverse</b> ID_var <b>in</b> (`[´ Exp `]´ | Exp)
            [ <b>with</b> Dcls <b>end</b> ]
            <b>do</b>
                Block
            <b>end</b>
      | <b>traverse</b>['/' NUM] Exp
            [ <b>with</b> Block <b>end</b> ]

      /* finalization */
      | <b>finalize</b> [&lt;assignment&gt;] <b>with</b>
            Block
        <b>end</b>

      /* parallel compositions */
      | (<b>par/and</b>|<b>par/or</b>|<b>par</b>) <b>do</b>
            Block
        <b>with</b>
            Block
        { <b>with</b>
            Block }
         <b>end</b>
      | <b>watching</b> [ (Var | `(´VarList`)´) <b>in</b> ] (WCLOCKK|WCLOCKE|ID_ext|Exp)
        <b>do</b>
            Block
        <b>end</b>

      /* pause */
      | <b>pause/if</b> Exp <b>do</b>
            Block
        <b>end</b>

      /* asynchronous execution */
      | (<b>async</b> | [<b>async/thread</b>]) [ `(´VarList`)´ ] <b>do</b>
            Block
        <b>end</b>

      /* synchronization */
      | <b>sync do</b>
            Block
        <b>end</b>
      | <b>atomic do</b>
            Block
        <b>end</b>

  /* C integration */

     | `{´ &lt;C code&gt; `}´

  /* Lua integration */

      | `[´ {`=´} `[´
            { <i>&lt;lua code&gt;</i> | `@´ Exp }
        `]´ {`=´} `]´

/* Block */

Block ::= { Stmt `;´ }

/* Identifiers */

ID       ::= &lt;a-z, A-Z, 0-9, _&gt; +
ID_var   ::= `_´ | ID    // beginning with a lowercase letter
ID_ext   ::= ID          // all in uppercase, not beginning with a digit
ID_cls   ::= ID          // beginning with an uppercase letter
ID_data  ::= ID          // beginning with an uppercase letter
ID_tag   ::= ID          // all in uppercase, not beginning with a digit
ID_field ::= ID          // not beginning with a digit
ID_nat   ::= ID          // beginning with an underscore
ID_type  ::= ( ID_nat | ID_cls | ID_data
             | <b>bool</b>  | <b>byte</b>  | <b>char</b>  | <b>f32</b>   | <b>f64</b>   |
             | <b>float</b> | <b>int</b>   | <b>s16</b>   | <b>s32</b>   | <b>s64</b>   |
             | <b>s8</b>    | <b>u16</b>   | <b>u32</b>   | <b>u64</b>   | <b>u8</b>    |
             | <b>uint</b>  | <b>void</b>  | <b>word</b> )

/* Types */

Type ::= ID_type ( `&&´ | `&´ | `?´ | `[´ [NUM] `]´ )

/* Lists */

TypeList ::= Type    { `,´ Type    }
ExpList  ::= Exp     { `,´ Exp     }
VarList  ::= ID_var  { `,´ ID_var  }
ParList  ::= ParItem { `,´ ParItem }
                <i>where</i>
                    ParItem ::= [<b>@hold</b>] Type [ID_var] 

/* Wall-clock values */

WCLOCKK ::= [NUM <b>h</b>] [NUM <b>min</b>] [NUM <b>s</b>] [NUM <b>ms</b>] [NUM <b>us</b>]
WCLOCKE ::= `(´ Exp `)´ (<b>h</b>|<b>min</b>|<b>s</b>|<b>ms</b>|<b>us</b>)

/* Expressions */

Exp ::= Prim
        |  (`$$´|`$´) Exp
        |  Exp (`?´|`!´)
        |  Exp `(´ [ExpList] `)´ [<b>finalize with</b> Block <b>end</b>]

Prim ::= `(´ Exp `)´
        |  ID_var | ID_nat
        |  <b>null</b> | NUM | String
        |  <b>true</b> | <b>false</b>
        |  (<b>call</b> | <b>call/rec</b>) Exp
        |  &lt;c-code&gt

/* Operator precedence */

    /* lowest priority */
    <b>or</b>
    <b>and</b>
    !=    ==    &lt;=    &gt;=    &lt;     &gt;
    |
    ^
    &
    &gt;&gt;    &lt;&lt;
    +     -
    *     /     %
    <b>not</b>    +    -    ~    *    &&    &    $$    $    (Type)
    ()    []    :    .    ?    !
    /* highest priority */

/* Other */

    // single-line comment

    /** nested
        /* multi-line */
        comments **/

    # preprocessor directive

</code></pre>
