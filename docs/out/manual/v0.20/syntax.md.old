Syntax
======

<pre><code>
  /* Declarations */

      /* variables, organisms, pools, and internal events */
      | <b>var</b> Type ID_var <b>with</b>
            Block
        <b>end</b>
      | <b>pool</b> Type ID_var [`=´ &lt;Assignment&gt;] { `,´ ID_var [`=´ &lt;Assignment&gt;] }
      | <b>event</b> (Type | `(´ TypeList `)´) ID_var { `,´ ID_var }

      /* internal functions */
      | <b>function</b> [<b>@rec</b>] `(´ParList`)´ `=>´ Type ID_var
            [ `do´ Block `end´ ]

      /* external functions */
      | <b>output</b> [<b>@rec</b>] `(´ParList`)´ `=>´ Type ID_var ID_ext { `,´ ID_ext }
      | <b>input</b>  [<b>@rec</b>] `(´ParList`)´ `=>´ Type ID_var ID_ext { `,´ ID_ext }
            [ `do´ Block `end´ ]

      /* interrupts */
      | <b>interrupt</b> `[´ NUM `]´ [<b>@rec</b>]
            [ `do´ Block `end´ ]

      /* external events */
      | <b>output</b> (Type | `(´ TypeList `)´) ID_ext { `,´ ID_ext }
      | <b>input</b>  (Type | `(´ TypeList `)´) ID_ext { `,´ ID_ext }

      /* external requests */
      | <b>output/input</b> `[´ [Exp] `]´ `(´ParList`)´ `=>´ Type ID_ext { `,´ ID_ext }
      | <b>input/output</b> `[´ [Exp] `]´ `(´ParList`)´ `=>´ Type ID_ext { `,´ ID_ext }
            [ `do´ Block `end´ ]

      /* classes & interfaces */
      | <b>class</b> ID_cls <b>with</b>
            Dcls
        <b>do</b>
            Block
        <b>end</b>
      | <b>interface</b> ID_cls <b>with</b>
            Dcls
        <b>end</b>
          <i>where</i>
              Dcls   ::= { (&lt;var&gt; | &lt;event-int&gt; | &lt;pool&gt; | &lt;function&gt; | DclImp) `;´ }
              DclImp ::= <b>interface</b> ID_cls { `,´ ID_cls }

      /* data types */
      | <b>data</b> ID_data <b>with</b>
            (Struct | Union)
        <b>end</b>
          <i>where</i>
              Struct ::= DclVar `;´ { DclVar `;´ }
              Union  ::= DclTag { <b>or</b> DclTag }
                  <i>where</i>
                      DclVar ::= <b>var</b> Type ID_var { `,´ ID_var }
                      DclTag ::= <b>tag</b> ID_tag <b>with</b>
                                     DclVar `;´ { DclVar `;´ }
                                 <b>end</b>

      /* deterministic annotations */
      | <b>@safe</b> ID <b>with</b> ID { `,´ ID }

  /* Assignments */

      | (Exp | `(´VarList`)´) `=´
          /* <i>Assignment</i> */
          ( Exp
          | AssignableBlock
          | &lt;await&gt;
          | ( [ `(´ ] &lt;emit-ext&gt
                    | &lt;call-ext&gt;
                    | &lt;request-ext&gt;
              [ `)´ ] )
          | [ `new´ ] Data
          | &lt;traverse-loop&gt;
          | &lt;traverse-rec&gt;
          | Vector
          | &lt;lua&gt;
          | &lt;do-org&gt;
          | &lt;spawn&gt;
          | &lt;thread&gt;
          )
              <i>where</i>
                  Data ::= ID_data [`.´ ID_tag] `(´ List `)´
                  List ::= [ (Data|Exp) { `,´ (Data|Exp) } ]

                  Vector ::= Item { `..´ Item }
                  Item   ::= Exp | `[´ [ExpList] `]´

                  AssignableBlock ::= &lt;do-end&gt; | &lt;if-then-else&gt; | &lt;loop&gt; | &lt;every&gt; | &lt;par&gt;

  /* Function calls */

      /* internal calls */
      | [<b>call</b>|<b>call/rec</b>] Exp * `(´ [ExpList] `)´

      /* external calls */
      | (<b>call</b>+<b>call/rec</b>) ID_ext [ `=>´ (Exp | `(´ [ExpList] `)´)

  /* Event handling */

      /* external request */
      | <b>request</b> ID_ext [ `=>´ (Exp | `(´ [ExpList] `)´)

  /* Organism instantiation */

      /* do organism */
      | <b>do</b> ID_cls <b>with</b>
            Block
        <b>end</b>

      /* spawn */
      | <b>spawn</b> * ID_cls * [<b>in</b> Exp]
            [ <b>with</b> Block <b>end</b> ]

      /* kill */
      | <b>kill</b> * Exp * [ `=>´ Exp ]

  /* Flow control */

      /* traverse */
      | <b>traverse</b> ID_var <b>in</b> (`[´ Exp `]´ | Exp)
            [ <b>with</b> Dcls <b>end</b> ]
            <b>do</b>
                Block
            <b>end</b>
      | <b>traverse</b>['/' NUM] Exp
            [ <b>with</b> Block <b>end</b> ]

      /* finalization */
      | <b>finalize</b> [&lt;assignment&gt;] <b>with</b>
            Block
        <b>end</b>

/* Lists */

ParList  ::= ParItem { `,´ ParItem }
                <i>where</i>
                    ParItem ::= [<b>@hold</b>] Type [ID_var] 

</code></pre>
